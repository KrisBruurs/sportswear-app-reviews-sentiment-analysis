sentiment_bing = as.factor(sentiment_bing)
)
###---Libraries---###
library(tidyverse)
library(tibble)
library(stringr)
library(tidytext)
library(vader)
library(tokenizers)
library(textdata)
library(textstem)
library(yardstick)
###---Input---###
tokens <- read_csv('data/tokenized_reviews.csv')
reviews <- read_csv('data/reviews.csv')
###---Process---###
tokens_bing <- tokens %>%
left_join(get_sentiments('bing')) %>%
mutate(replace_na(sentiment, 'neutral'))
sentiment_bing <- tokens_bing %>%
group_by(review_id) %>%
count(sentiment) %>%
ungroup() %>%
pivot_wider( # you will normally Google this
names_from = sentiment,
values_from = n,
values_fill = 0
) %>%
mutate(
sentiment_bing = case_when(
positive > negative ~ "positive",
negative > positive ~ "negative",
.default = "neutral"
)
)
# Compare with sentiment star
comparison_df <- reviews %>%
select(review_id, sentiment_star) %>%
left_join(sentiment_bing, by = "review_id") %>%
select(id, sentiment_star, sentiment_bing) %>%
mutate(
sentiment_star = as.factor(sentiment_star),
sentiment_bing = as.factor(sentiment_bing)
)
View(reviews)
###---Output---###
write_csv(tokens_stemmed, 'data/tokenized_reviews.csv')
write_csv(df, 'data/cleaned_reviews.csv')
reviews <- read_csv('data/cleaned_reviews.csv')
###---Process---###
tokens_bing <- tokens %>%
left_join(get_sentiments('bing')) %>%
mutate(replace_na(sentiment, 'neutral'))
sentiment_bing <- tokens_bing %>%
group_by(review_id) %>%
count(sentiment) %>%
ungroup() %>%
pivot_wider( # you will normally Google this
names_from = sentiment,
values_from = n,
values_fill = 0
) %>%
mutate(
sentiment_bing = case_when(
positive > negative ~ "positive",
negative > positive ~ "negative",
.default = "neutral"
)
)
# Compare with sentiment star
comparison_df <- reviews %>%
select(review_id, sentiment_star) %>%
left_join(sentiment_bing, by = "review_id") %>%
select(id, sentiment_star, sentiment_bing) %>%
mutate(
sentiment_star = as.factor(sentiment_star),
sentiment_bing = as.factor(sentiment_bing)
)
# Compare with sentiment star
comparison_df <- reviews %>%
select(review_id, sentiment_star) %>%
left_join(sentiment_bing, by = "review_id") %>%
select(review_id, sentiment_star, sentiment_bing) %>%
mutate(
sentiment_star = as.factor(sentiment_star),
sentiment_bing = as.factor(sentiment_bing)
)
accuracy(comparison_df,
sentiment_star,
sentiment_bing)
conf_mat(comparison_df,
sentiment_star,
sentiment_bing)
# Sentiment Afinn
tokens_afinn <- tokens %>%
left_join(get_sentiments('afinn')) %>%
mutate(value = replace_na(value, 0))
sentiment_afinn <- tokens_afinn %>%
group_by(review_id) %>%
summarise(score = sum(value, na.rm = TRUE)) %>%
ungroup %>%
mutate(sentiment_afinn = case_when(
score > 0 ~ 'positive',
score < 0 ~ 'negative',
.default = 'neutral'
)) %>%
select(!score)
comparison_df <- comparison_df %>%
left_join(sentiment_afinn, by = 'review_id')
View(comparison_df)
comparison_df <- comparison_df %>%
left_join(sentiment_afinn, by = 'review_id') %>%
mutate(sentiment_afinn = as.factor(sentiment_afinn))
comparison_df <- comparison_df %>%
mutate(sentiment_afinn = as.factor(sentiment_afinn))
accuracy(comparison_df,
sentiment_star,
sentiment_afinn)
conf_mat(comparison_df,
sentiment_star,
sentiment_afinn)
# compare two methods to themselves
accuracy(comparison_df,
sentiment_bing,
sentiment_afinn)
conf_mat(comparison_df,
sentiment_bing,
sentiment_afinn)
# Sentiment VADER
vader_sent <- vader_df(reviews$review)
# Sentiment VADER
vader_sent <- vader_df(reviews$content)
vader_sent2 <- vader_sent %>%
rowid_to_column("review_id") %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(id, sentiment_vader) %>%
mutate(
id = as.numeric(id),
sentiment_vader = as.factor(sentiment_vader))
vader_sent2 <- vader_sent %>%
rowid_to_column("review_id") %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(id, sentiment_vader) %>%
mutate(
id = as.numeric(review_id),
sentiment_vader = as.factor(sentiment_vader))
vader_sent2 <- vader_sent %>%
rowid_to_column("review_id") %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(review_id, sentiment_vader) %>%
mutate(
id = as.numeric(review_id),
sentiment_vader = as.factor(sentiment_vader))
comparison_df <- comparison_df %>%
left_join(vader_sent2, by = 'reiview_id')
comparison_df <- comparison_df %>%
left_join(vader_sent2, by = 'review_id')
vader_sent2 <- vader_sent %>%
rowid_to_column("review_id") %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(review_id, sentiment_vader) %>%
mutate(
sentiment_vader = as.factor(sentiment_vader))
comparison_df <- comparison_df %>%
left_join(vader_sent2, by = 'review_id')
View(vader_sent2)
View(vader_sent)
View(comparison_df)
vader_sent2 <- vader_sent %>%
left_join(reviews, by = 'content') %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(review_id, sentiment_vader) %>%
mutate(
sentiment_vader = as.factor(sentiment_vader))
vader_sent2 <- vader_sent %>%
left_join(reviews, by = content) %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(review_id, sentiment_vader) %>%
mutate(
sentiment_vader = as.factor(sentiment_vader))
View(reviews)
vader_sent2 <- vader_sent %>%
left_join(reviews, by = c('content', 'text')) %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(review_id, sentiment_vader) %>%
mutate(
sentiment_vader = as.factor(sentiment_vader))
vader_sent2 <- vader_sent %>%
left_join(reviews, by = c('text', 'content')) %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(review_id, sentiment_vader) %>%
mutate(
sentiment_vader = as.factor(sentiment_vader))
vader_sent2 <- vader_sent %>%
left_join(reviews) %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(review_id, sentiment_vader) %>%
mutate(
sentiment_vader = as.factor(sentiment_vader))
vader_sent2 <- vader_sent %>%
left_join(reviews, by = c('content', 'text')) %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(review_id, sentiment_vader) %>%
mutate(
sentiment_vader = as.factor(sentiment_vader))
vader_sent2 <- vader_sent %>%
left_join(reviews, by = c('content' = 'text')) %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(review_id, sentiment_vader) %>%
mutate(
sentiment_vader = as.factor(sentiment_vader))
vader_sent2 <- vader_sent %>%
left_join(reviews, by = c('text' = 'content')) %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(review_id, sentiment_vader) %>%
mutate(
sentiment_vader = as.factor(sentiment_vader))
df <- df %>%
mutate(
id = rowid_to_column(),
sentiment_star = case_when(
score < 3 ~ 'negative',
score == 3 ~ 'neutral',
score > 3 ~ 'positive'
))
df <- df %>%
rowid_to_column('id') %>%
mutate(
sentiment_star = case_when(
score < 3 ~ 'negative',
score == 3 ~ 'neutral',
score > 3 ~ 'positive'
))
###---Libraries---###
library(tidyverse)
library(tibble)
library(stringr)
library(tidytext)
library(textstem)
library(tokenizers)
library(reshape2)
library(wordcloud)
###---Input---###
df <- read_csv('data/reviews.csv')
###---Processing---###
# Add manual column with positive, negative, neutral rating based on stars
df <- df %>%
rowid_to_column('id') %>%
mutate(
sentiment_star = case_when(
score < 3 ~ 'negative',
score == 3 ~ 'neutral',
score > 3 ~ 'positive'
))
# Add columns with number of words/characters
df <- df %>%
mutate(n_words = count_words(content),
n_char = nchar(content))
# Plot number of words on histogram to inspect data
df %>%
ggplot() +
geom_histogram(
aes(x = n_words)
) +
theme_minimal() +
scale_x_continuous()
df %>%
summarise(
mean_words = mean(n_words),
mean_char = mean(n_char)
)
# Turn reviews into tokens
tokens <- df %>%
unnest_tokens(word, content) # word is the level, review is column
# Find most common words
common_words <- tokens %>% # Create dataset of most common words
group_by(word) %>%
count(sort = TRUE)
# Remove standard stopwords
tokens_no_stop <- tokens %>%
anti_join(stop_words) %>%
filter(!str_detect(word, "[[:digit:]]+"))
# Check most common words again for manual removal
common_words_2 <- tokens_no_stop %>%
group_by(word) %>%
count(sort = TRUE)
# Create custom stopwords
custom_stop_words <-  # words that have no real value, all reviews are about doctors
tibble(
word = c(
'app'
),
lexicon = 'docs' # Create lexicon !!!!
)
# Remove custom stopwords
tokens_no_stop <- tokens_no_stop %>%
anti_join(custom_stop_words)
# Plot Common Words after stopword removal
tokens_no_stop %>%
group_by(word) %>%
count(sort = TRUE) %>%
ungroup() %>%
top_n(25) %>%
ggplot(aes(x = n,
y = reorder(word, n)
)
) +
geom_col() +
scale_y_reordered() +
labs(y = NULL)
# Stemming
tokens_stemmed <- tokens_no_stop %>%
mutate(word_stem = stem_words(word),
word_lemma = lemmatize_words(word))
###---Output---###
write_csv(tokens_stemmed, 'data/tokenized_reviews.csv')
write_csv(df, 'data/cleaned_reviews.csv')
###---Libraries---###
library(tidyverse)
library(tibble)
library(stringr)
library(tidytext)
library(vader)
library(tokenizers)
library(textdata)
library(textstem)
library(yardstick)
###---Input---###
tokens <- read_csv('data/tokenized_reviews.csv')
reviews <- read_csv('data/cleaned_reviews.csv')
###---Process---###
# Sentiment Bing
tokens_bing <- tokens %>%
left_join(get_sentiments('bing')) %>%
mutate(replace_na(sentiment, 'neutral'))
sentiment_bing <- tokens_bing %>%
group_by(id) %>%
count(sentiment) %>%
ungroup() %>%
pivot_wider( # you will normally Google this
names_from = sentiment,
values_from = n,
values_fill = 0
) %>%
mutate(
sentiment_bing = case_when(
positive > negative ~ "positive",
negative > positive ~ "negative",
.default = "neutral"
)
)
# Compare with sentiment star
comparison_df <- reviews %>%
select(id, sentiment_star) %>%
left_join(sentiment_bing, by = "id") %>%
select(review_id, sentiment_star, sentiment_bing) %>%
mutate(
sentiment_star = as.factor(sentiment_star),
sentiment_bing = as.factor(sentiment_bing)
)
###---Libraries---###
library(tidyverse)
library(tibble)
library(stringr)
library(tidytext)
library(vader)
library(tokenizers)
library(textdata)
library(textstem)
library(yardstick)
###---Input---###
tokens <- read_csv('data/tokenized_reviews.csv')
reviews <- read_csv('data/cleaned_reviews.csv')
###---Process---###
# Sentiment Bing
tokens_bing <- tokens %>%
left_join(get_sentiments('bing')) %>%
mutate(replace_na(sentiment, 'neutral'))
sentiment_bing <- tokens_bing %>%
group_by(id) %>%
count(sentiment) %>%
ungroup() %>%
pivot_wider( # you will normally Google this
names_from = sentiment,
values_from = n,
values_fill = 0
) %>%
mutate(
sentiment_bing = case_when(
positive > negative ~ "positive",
negative > positive ~ "negative",
.default = "neutral"
)
)
# Compare with sentiment star
comparison_df <- reviews %>%
select(id, sentiment_star) %>%
left_join(sentiment_bing, by = "id") %>%
select(id, sentiment_star, sentiment_bing) %>%
mutate(
sentiment_star = as.factor(sentiment_star),
sentiment_bing = as.factor(sentiment_bing)
)
accuracy(comparison_df,
sentiment_star,
sentiment_bing)
conf_mat(comparison_df,
sentiment_star,
sentiment_bing)
# Sentiment Afinn
tokens_afinn <- tokens %>%
left_join(get_sentiments('afinn')) %>%
mutate(value = replace_na(value, 0))
sentiment_afinn <- tokens_afinn %>%
group_by(id) %>%
summarise(score = sum(value, na.rm = TRUE)) %>%
ungroup %>%
mutate(sentiment_afinn = case_when(
score > 0 ~ 'positive',
score < 0 ~ 'negative',
.default = 'neutral'
)) %>%
select(!score)
comparison_df <- comparison_df %>%
left_join(sentiment_afinn, by = 'id')
comparison_df <- comparison_df %>%
mutate(sentiment_afinn = as.factor(sentiment_afinn))
accuracy(comparison_df,
sentiment_star,
sentiment_afinn)
conf_mat(comparison_df,
sentiment_star,
sentiment_afinn)
# compare two methods to themselves
accuracy(comparison_df,
sentiment_bing,
sentiment_afinn)
conf_mat(comparison_df,
sentiment_bing,
sentiment_afinn)
# Sentiment VADER
vader_sent <- vader_df(reviews$content)
vader_sent2 <- vader_sent %>%
rowid_to_column('id') %>%
mutate(sentiment_vader = case_when(
compound > 0.05 ~ 'positive',
compound < -0.05 ~ 'negative',
.default = 'neutral'
)) %>%
select(id, sentiment_vader) %>%
mutate(
sentiment_vader = as.factor(sentiment_vader))
comparison_df <- comparison_df %>%
left_join(vader_sent2, by = 'id')
accuracy(comparison_df,
sentiment_star,
sentiment_vader)
conf_mat(comparison_df, # VADER has a harder time classifying neutral
sentiment_star,
sentiment_vader)
###---Output---###
accuracy(comparison_df,
sentiment_star,
sentiment_vader)
